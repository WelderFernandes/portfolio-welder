name: CI/CD

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - run: npm run build
      # - run: npm run lint

  docker:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.out.outputs.image }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=sha,format=short
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
      - uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Set image output
        id: out
        run: |
          echo "image=$(jq -r '.tags[0]' <<< '${{ steps.meta.outputs.json }}')" >> "$GITHUB_OUTPUT"

  deploy:
    needs: docker
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Dockploy
        env:
          DOCKPLOY_WEBHOOK_URL: ${{ secrets.DOCKPLOY_WEBHOOK_URL }}
          IMAGE: ${{ needs.docker.outputs.image }}
        run: |
          if [ -z "$DOCKPLOY_WEBHOOK_URL" ]; then
            echo "DOCKPLOY_WEBHOOK_URL nÃ£o configurado" >&2
            exit 1
          fi
          curl -sS -X POST "$DOCKPLOY_WEBHOOK_URL" \
            -H 'Content-Type: application/json' \
            -d "{\"image\":\"$IMAGE\"}"


